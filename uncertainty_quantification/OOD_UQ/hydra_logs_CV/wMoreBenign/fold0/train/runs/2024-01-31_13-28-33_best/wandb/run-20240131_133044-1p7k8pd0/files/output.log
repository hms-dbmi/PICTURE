[2024-01-31 13:30:45,075][src.tasks.train_task][INFO] - Instantiating trainer <pytorch_lightning.Trainer>
[2024-01-31 13:30:45,086][pytorch_lightning.utilities.rank_zero][INFO] - Multiprocessing is handled by SLURM.
[2024-01-31 13:30:45,089][pytorch_lightning.utilities.rank_zero][INFO] - Trainer already configured with model summary callbacks: [<class 'pytorch_lightning.callbacks.rich_model_summary.RichModelSummary'>]. Skipping setting a default `ModelSummary` callback.
[2024-01-31 13:30:45,090][pytorch_lightning.utilities.rank_zero][INFO] - GPU available: False, used: False
[2024-01-31 13:30:45,090][pytorch_lightning.utilities.rank_zero][INFO] - TPU available: False, using: 0 TPU cores
[2024-01-31 13:30:45,090][pytorch_lightning.utilities.rank_zero][INFO] - IPU available: False, using: 0 IPUs
[2024-01-31 13:30:45,091][pytorch_lightning.utilities.rank_zero][INFO] - HPU available: False, using: 0 HPUs
[2024-01-31 13:30:45,091][src.tasks.train_task][INFO] - Logging hyperparameters!
[2024-01-31 13:30:45,099][src.tasks.train_task][INFO] - Starting training!
train: 281 patients, val: 141 patients, test: 141 patients, total: 563 patients
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/datamodules/vienna_feature_datamodule.py:155: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  weights = class_weights[torch.tensor(targets)]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/core/optimizer.py:380: RuntimeWarning: Found unsupported keys in the optimizer configuration: {'scheduler'}
  rank_zero_warn(
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 1000. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(
┏━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓
┃    ┃ Name                        ┃ Type                          ┃ Params ┃
┡━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩
│ 0  │ net                         │ NaturalPosteriorNetworkModel  │  3.5 K │
│ 1  │ net.encoder                 │ Sequential                    │  3.1 K │
│ 2  │ net.encoder.0               │ Identity                      │      0 │
│ 3  │ net.encoder.1               │ Sequential                    │  3.1 K │
│ 4  │ net.encoder.1.0             │ Sequential                    │  3.1 K │
│ 5  │ net.encoder.1.0.0           │ Dropout                       │      0 │
│ 6  │ net.encoder.1.0.1           │ Linear                        │  3.1 K │
│ 7  │ net.flow                    │ MaskedAutoregressiveFlow      │    362 │
│ 8  │ net.flow.transforms         │ ModuleList                    │    362 │
│ 9  │ net.flow.transforms.0       │ MaskedAutoregressiveTransform │    177 │
│ 10 │ net.flow.transforms.0.net   │ MADE                          │    177 │
│ 11 │ net.flow.transforms.0.net.0 │ _MaskedLinear                 │     65 │
│ 12 │ net.flow.transforms.0.net.1 │ LeakyReLU                     │      0 │
│ 13 │ net.flow.transforms.0.net.2 │ _MaskedLinear                 │    112 │
│ 14 │ net.flow.transforms.1       │ BatchNormTransform            │      8 │
│ 15 │ net.flow.transforms.2       │ MaskedAutoregressiveTransform │    177 │
│ 16 │ net.flow.transforms.2.net   │ MADE                          │    177 │
│ 17 │ net.flow.transforms.2.net.0 │ _MaskedLinear                 │     65 │
│ 18 │ net.flow.transforms.2.net.1 │ LeakyReLU                     │      0 │
│ 19 │ net.flow.transforms.2.net.2 │ _MaskedLinear                 │    112 │
│ 20 │ net.output                  │ CategoricalOutput             │     25 │
│ 21 │ net.output.linear           │ Linear                        │     25 │
│ 22 │ net.output.prior            │ DirichletPrior                │      0 │
│ 23 │ net.scaler                  │ EvidenceScaler                │      0 │
│ 24 │ criterion                   │ BayesianLoss                  │      0 │
│ 25 │ train_acc                   │ Accuracy                      │      0 │
│ 26 │ val_acc                     │ Accuracy                      │      0 │
│ 27 │ test_acc                    │ Accuracy                      │      0 │
│ 28 │ train_auroc                 │ AUROC                         │      0 │
│ 29 │ val_auroc                   │ AUROC                         │      0 │
│ 30 │ test_auroc                  │ AUROC                         │      0 │
│ 31 │ brier_score                 │ BrierScore                    │      0 │
│ 32 │ alea_conf_pr                │ AUCPR                         │      0 │
│ 33 │ alea_conf_roc               │ AUROC                         │      0 │
│ 34 │ epist_conf_pr               │ AUCPR                         │      0 │
│ 35 │ epist_conf_roc              │ AUROC                         │      0 │
│ 36 │ val_acc_best                │ MaxMetric                     │      0 │
└────┴─────────────────────────────┴───────────────────────────────┴────────┘
Trainable params: 3.5 K
Non-trainable params: 0
Total params: 3.5 K
Total estimated model params size (MB): 0
[2024-01-31 13:30:54,807][pytorch_lightning.trainer.connectors.signal_connector][INFO] - SLURM auto-requeueing enabled. Setting signal handlers.
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: No positive samples in targets, true positive value should be meaningless. Returning zero tensor in true positive score
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 20.27it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/datamodules/vienna_feature_datamodule.py:155: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  weights = class_weights[torch.tensor(targets)]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 586. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 941. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(

100%|██████████| 69/69 [00:03<00:00, 18.88it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.70it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.88it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.35it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 69/69 [00:03<00:00, 18.08it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 69/69 [00:04<00:00, 14.21it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 69/69 [00:03<00:00, 18.16it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.83it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 69/69 [00:03<00:00, 18.65it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.08it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.45it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.39it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.39it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.43it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 69/69 [00:03<00:00, 18.55it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.08it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.25it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.05it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.38it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 69/69 [00:03<00:00, 18.21it/s]
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/models/uncertainty_module.py:555: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  plt.figure()
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)
Epoch 19  ━━━━━━━━━━━━━━━━━ 207/207 0:02:09 • 0:00:00 1.57it/s loss: 0.316
                                                               v_num: 8pd0
                                                               val/acc: 0.875
                                                               val/acc_best:
                                                               0.875 train/acc:
                                                               0.904
[2024-01-31 14:16:15,061][src.tasks.train_task][INFO] - Starting testing!
[2024-01-31 14:16:15,066][pytorch_lightning.utilities.rank_zero][INFO] - Restoring states from the checkpoint path at /n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/hydra_logs_CV/wMoreBenign/fold0/train/runs/2024-01-31_13-28-33/uncertainty_vienna_CTransFeature_wMoreBenign_fold0/1p7k8pd0/checkpoints/epoch=19-step=2760.ckpt
[2024-01-31 14:16:15,076][pytorch_lightning.utilities.rank_zero][INFO] - Loaded model weights from checkpoint at /n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/hydra_logs_CV/wMoreBenign/fold0/train/runs/2024-01-31_13-28-33/uncertainty_vienna_CTransFeature_wMoreBenign_fold0/1p7k8pd0/checkpoints/epoch=19-step=2760.ckpt
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 993. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(




100%|██████████| 149/149 [00:07<00:00, 18.71it/s]
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/models/uncertainty_module.py:625: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored
  ax1.scatter(embeddings_tsne[idxs, 0], embeddings_tsne[idxs, 1], c=class_colors[idxs], label=label, alpha=0.5, s=4, cmap="RdYlGn")
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃          Test metric          ┃         DataLoader 0          ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│           test/acc            │      0.9444207549095154       │
│     test/aleatoric_AUPRC      │      0.8462134599685669       │
│    test/aleatoric_AUPRC_0     │      0.8549819588661194       │
│    test/aleatoric_AUPRC_1     │     0.051131222397089005      │
│ test/aleatoric_AUPRC_MacroAvg │      0.4530565906316042       │
│     test/aleatoric_AUROC      │      0.8803966641426086       │
│    test/aleatoric_AUROC_0     │      0.9002228379249573       │
│    test/aleatoric_AUROC_1     │      0.5435046553611755       │
│ test/aleatoric_AUROC_MacroAvg │      0.7218637466430664       │
│   test/aleatoric_confidence   │      0.3072841763496399       │
│           test/auc            │      0.9023730158805847       │
│       test/brier_score        │      0.3258425295352936       │
│    test/calibration_metric    │      0.8668258786201477       │
│     test/epistemic_AUPRC      │      0.8491231799125671       │
│    test/epistemic_AUPRC_0     │      0.8575578331947327       │
│    test/epistemic_AUPRC_1     │     0.053935032337903976      │
│ test/epistemic_AUPRC_MacroAvg │      0.4557464327663183       │
│     test/epistemic_AUROC      │      0.8915700316429138       │
│    test/epistemic_AUROC_0     │      0.9089023470878601       │
│    test/epistemic_AUROC_1     │      0.5970537662506104       │
│ test/epistemic_AUROC_MacroAvg │      0.7529780566692352       │
│   test/epistemic_confidence   │      0.5895344018936157       │
│           test/loss           │       0.545661985874176       │
└───────────────────────────────┴───────────────────────────────┘
Testing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 68/68 0:00:41 • 0:00:00 1.63it/s
[2024-01-31 15:26:48,749][src.tasks.train_task][INFO] - Best ckpt path: /n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/hydra_logs_CV/wMoreBenign/fold0/train/runs/2024-01-31_13-28-33/uncertainty_vienna_CTransFeature_wMoreBenign_fold0/1p7k8pd0/checkpoints/epoch=19-step=2760.ckpt
[2024-01-31 15:26:48,756][src.utils.utils][INFO] - Closing loggers...
[2024-01-31 15:26:48,757][src.utils.utils][INFO] - Closing wandb!