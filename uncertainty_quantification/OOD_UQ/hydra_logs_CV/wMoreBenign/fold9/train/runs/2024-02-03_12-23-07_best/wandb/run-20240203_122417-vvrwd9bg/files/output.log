[2024-02-03 12:24:18,455][src.tasks.train_task][INFO] - Instantiating trainer <pytorch_lightning.Trainer>
[2024-02-03 12:24:18,468][pytorch_lightning.utilities.rank_zero][INFO] - Multiprocessing is handled by SLURM.
[2024-02-03 12:24:18,471][pytorch_lightning.utilities.rank_zero][INFO] - Trainer already configured with model summary callbacks: [<class 'pytorch_lightning.callbacks.rich_model_summary.RichModelSummary'>]. Skipping setting a default `ModelSummary` callback.
[2024-02-03 12:24:18,472][pytorch_lightning.utilities.rank_zero][INFO] - GPU available: False, used: False
[2024-02-03 12:24:18,472][pytorch_lightning.utilities.rank_zero][INFO] - TPU available: False, using: 0 TPU cores
[2024-02-03 12:24:18,472][pytorch_lightning.utilities.rank_zero][INFO] - IPU available: False, using: 0 IPUs
[2024-02-03 12:24:18,473][pytorch_lightning.utilities.rank_zero][INFO] - HPU available: False, using: 0 HPUs
[2024-02-03 12:24:18,473][src.tasks.train_task][INFO] - Logging hyperparameters!
[2024-02-03 12:24:18,482][src.tasks.train_task][INFO] - Starting training!
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/core/optimizer.py:380: RuntimeWarning: Found unsupported keys in the optimizer configuration: {'scheduler'}
  rank_zero_warn(
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 1000. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(
train: 281 patients, val: 141 patients, test: 141 patients, total: 563 patients
┏━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓
┃    ┃ Name                        ┃ Type                          ┃ Params ┃
┡━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩
│ 0  │ net                         │ NaturalPosteriorNetworkModel  │ 17.3 K │
│ 1  │ net.encoder                 │ Sequential                    │ 12.3 K │
│ 2  │ net.encoder.0               │ Identity                      │      0 │
│ 3  │ net.encoder.1               │ Sequential                    │ 12.3 K │
│ 4  │ net.encoder.1.0             │ Sequential                    │ 12.3 K │
│ 5  │ net.encoder.1.0.0           │ Dropout                       │      0 │
│ 6  │ net.encoder.1.0.1           │ Linear                        │ 12.3 K │
│ 7  │ net.flow                    │ MaskedAutoregressiveFlow      │  4.9 K │
│ 8  │ net.flow.transforms         │ ModuleList                    │  4.9 K │
│ 9  │ net.flow.transforms.0       │ MaskedAutoregressiveTransform │  2.4 K │
│ 10 │ net.flow.transforms.0.net   │ MADE                          │  2.4 K │
│ 11 │ net.flow.transforms.0.net.0 │ _MaskedLinear                 │    833 │
│ 12 │ net.flow.transforms.0.net.1 │ LeakyReLU                     │      0 │
│ 13 │ net.flow.transforms.0.net.2 │ _MaskedLinear                 │  1.6 K │
│ 14 │ net.flow.transforms.1       │ BatchNormTransform            │     32 │
│ 15 │ net.flow.transforms.2       │ MaskedAutoregressiveTransform │  2.4 K │
│ 16 │ net.flow.transforms.2.net   │ MADE                          │  2.4 K │
│ 17 │ net.flow.transforms.2.net.0 │ _MaskedLinear                 │    833 │
│ 18 │ net.flow.transforms.2.net.1 │ LeakyReLU                     │      0 │
│ 19 │ net.flow.transforms.2.net.2 │ _MaskedLinear                 │  1.6 K │
│ 20 │ net.output                  │ CategoricalOutput             │     85 │
│ 21 │ net.output.linear           │ Linear                        │     85 │
│ 22 │ net.output.prior            │ DirichletPrior                │      0 │
│ 23 │ net.scaler                  │ EvidenceScaler                │      0 │
│ 24 │ criterion                   │ BayesianLoss                  │      0 │
│ 25 │ train_acc                   │ Accuracy                      │      0 │
│ 26 │ val_acc                     │ Accuracy                      │      0 │
│ 27 │ test_acc                    │ Accuracy                      │      0 │
│ 28 │ train_auroc                 │ AUROC                         │      0 │
│ 29 │ val_auroc                   │ AUROC                         │      0 │
│ 30 │ test_auroc                  │ AUROC                         │      0 │
│ 31 │ brier_score                 │ BrierScore                    │      0 │
│ 32 │ alea_conf_pr                │ AUCPR                         │      0 │
│ 33 │ alea_conf_roc               │ AUROC                         │      0 │
│ 34 │ epist_conf_pr               │ AUCPR                         │      0 │
│ 35 │ epist_conf_roc              │ AUROC                         │      0 │
│ 36 │ val_acc_best                │ MaxMetric                     │      0 │
└────┴─────────────────────────────┴───────────────────────────────┴────────┘
Trainable params: 17.3 K
Non-trainable params: 0
Total params: 17.3 K
Total estimated model params size (MB): 0
[2024-02-03 12:24:26,509][pytorch_lightning.trainer.connectors.signal_connector][INFO] - SLURM auto-requeueing enabled. Setting signal handlers.
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: No positive samples in targets, true positive value should be meaningless. Returning zero tensor in true positive score
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 19.21it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 586. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 941. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(

100%|██████████| 61/61 [00:03<00:00, 18.70it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.99it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.64it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 18.27it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 18.14it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 18.37it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.51it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.18it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.69it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)


100%|██████████| 61/61 [00:04<00:00, 13.58it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.65it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.87it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.79it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.74it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.62it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.93it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.76it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.50it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.17it/s]
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)

100%|██████████| 61/61 [00:03<00:00, 17.73it/s]
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/models/uncertainty_module.py:556: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  plt.figure()
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)
Epoch 19  ━━━━━━━━━━━━━━━━━ 207/207 0:02:13 • 0:00:00 1.64it/s loss: 0.0168
                                                               v_num: d9bg
                                                               val/acc: 0.983
                                                               val/acc_best:
                                                               0.984 train/acc:
                                                               0.994
[2024-02-03 13:10:42,827][src.tasks.train_task][INFO] - Starting testing!
[2024-02-03 13:10:42,832][pytorch_lightning.utilities.rank_zero][INFO] - Restoring states from the checkpoint path at /n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/hydra_logs_CV/wMoreBenign/fold9/train/runs/2024-02-03_12-23-07/uncertainty_vienna_CTransFeature_wMoreBenign_fold9/vvrwd9bg/checkpoints/epoch=19-step=2760.ckpt
[2024-02-03 13:10:42,841][pytorch_lightning.utilities.rank_zero][INFO] - Loaded model weights from checkpoint at /n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/hydra_logs_CV/wMoreBenign/fold9/train/runs/2024-02-03_12-23-07/uncertainty_vienna_CTransFeature_wMoreBenign_fold9/vvrwd9bg/checkpoints/epoch=19-step=2760.ckpt
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:72: UserWarning: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 993. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
  warning_cache.warn(




100%|██████████| 140/140 [00:07<00:00, 18.10it/s]
/n/data2/hms/dbmi/kyu/lab/shl968/pathology_uncertainty-main/src/models/uncertainty_module.py:626: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored
  ax1.scatter(embeddings_tsne[idxs, 0], embeddings_tsne[idxs, 1], c=class_colors[idxs], label=label, alpha=0.5, s=4, cmap="RdYlGn")
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃          Test metric          ┃         DataLoader 0          ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│           test/acc            │      0.9650552272796631       │
│     test/aleatoric_AUPRC      │      0.8144790530204773       │
│    test/aleatoric_AUPRC_0     │      0.8160912990570068       │
│    test/aleatoric_AUPRC_1     │      0.07965128868818283      │
│ test/aleatoric_AUPRC_MacroAvg │      0.44787129387259483      │
│     test/aleatoric_AUROC      │      0.8150298595428467       │
│    test/aleatoric_AUROC_0     │       0.824137806892395       │
│    test/aleatoric_AUROC_1     │      0.6602639555931091       │
│ test/aleatoric_AUROC_MacroAvg │      0.7422008812427521       │
│   test/aleatoric_confidence   │      0.48871827125549316      │
│           test/auc            │      0.9907112121582031       │
│       test/brier_score        │      0.05621010437607765      │
│    test/calibration_metric    │      0.8310269117355347       │
│     test/epistemic_AUPRC      │      0.8440951108932495       │
│    test/epistemic_AUPRC_0     │      0.8503724932670593       │
│    test/epistemic_AUPRC_1     │     0.061959587037563324      │
│ test/epistemic_AUPRC_MacroAvg │      0.4561660401523113       │
│     test/epistemic_AUROC      │      0.8505034446716309       │
│    test/epistemic_AUROC_0     │      0.8648951649665833       │
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that has
                not been set for this class (AUCPR). The property determines if `update` by
                default needs access to the full metric state. If this is not the case, significant speedups can be
                achieved and we recommend setting this to `False`.
                We provide an checking function
                `from torchmetrics.utilities import check_forward_no_full_state`
                that can be used to check if the `full_state_update=True` (old and potential slower behaviour,
                default for now) or if `full_state_update=False` can be used safely.
  warnings.warn(*args, **kwargs)
/home/shl968/.conda/envs/uncertainty/lib/python3.10/site-packages/torchmetrics/utilities/prints.py:36: UserWarning: Metric `AUROC` will save all targets and predictions in buffer. For large datasets this may lead to large memory footprint.
  warnings.warn(*args, **kwargs)